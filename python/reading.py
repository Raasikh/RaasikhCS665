# -*- coding: utf-8 -*-
"""Reading.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/16EGeG_Wub6libjBQrXcMm6NIJuzyvzoF
"""

# !pip install customtkinter
# !pip install pyodbc

# !pip install flask
# !pip install pyngrok

from flask import Flask, request, render_template_string
import pyodbc
app = Flask(__name__)

# Database connection function
def get_connection():
    return pyodbc.connect(
        'DRIVER={SQL Server};'
        'Server=LAPTOP-QOK8SQ4M\\MSSQLSERVER1;'
        'Database=ChessApp;'
        'Trusted_Connection=yes;'
    )
@app.route("/analytics", methods=["GET", "POST"])
def analytics():
    result = ""
    query_name = request.form.get("query_name")

    if request.method == "POST":
        try:
            conn = get_connection()
            cur = conn.cursor()

            # SQLs based on button clicked
            if query_name == "games_with_names":
                cur.execute("""
                    SELECT g.game_id, u1.username AS player1, u2.username AS player2, g.winner_id, g.game_date
                    FROM Games g
                    JOIN Users u1 ON g.player1_id = u1.user_id
                    JOIN Users u2 ON g.player2_id = u2.user_id
                """)
            elif query_name == "expert_ai_games":
                cur.execute("""
                    SELECT * FROM AI_Games WHERE ai_difficulty = 'Expert'
                """)
            elif query_name == "leaderboard_usernames":
                cur.execute("""
                    SELECT l.rank, u.username, l.elo_rating, l.last_game_date
                    FROM Leaderboard l
                    JOIN Users u ON l.user_id = u.user_id
                """)
            elif query_name == "top3_players":
                cur.execute("""
                    SELECT TOP 3 username, elo_rating FROM Users ORDER BY elo_rating DESC
                """)

            # Format the output
            rows = cur.fetchall()
            if not rows:
                result = "No results."
            else:
                columns = [column[0] for column in cur.description]
                table = "<table border='1'><tr>" + "".join(f"<th>{col}</th>" for col in columns) + "</tr>"
                for row in rows:
                    table += "<tr>" + "".join(f"<td>{cell}</td>" for cell in row) + "</tr>"
                table += "</table>"
                result = table

        except Exception as e:
            result = f"‚ùå Error: {e}"

    return render_template_string("""
    <h2>Database Insights & Predefined Queries</h2>
    <form method="post">
      <button name="query_name" value="games_with_names">Show All Games with Player Names</button><br><br>
      <button name="query_name" value="expert_ai_games">Show AI Games (Expert Level Only)</button><br><br>
      <button name="query_name" value="leaderboard_usernames">Leaderboard with Usernames</button><br><br>
      <button name="query_name" value="top3_players">Top 3 Players by Elo Rating</button>
    </form>
    <div style="margin-top:20px;">{{ result|safe }}</div>
    <br>
    <a href='/'>Home</a>
    """, result=result)

@app.route("/")
def home():
    return render_template_string("""
    <h2>Welcome to ChessApp Portal</h2>
    <ul>
        <li><a href="/analytics">Go to Analytics</a></li>
        <li><a href="/insert_user">Insert User</a></li>
        <li><a href="/update_user">Update User</a></li>
        <li><a href="/delete_user">Delete User</a></li>
    </ul>
    """)

app.run(port=5000)